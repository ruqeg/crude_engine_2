
#ifdef CRUDE_VALIDATOR_LINTING
#include "crude/platform.glsli"
#include "crude/debug.glsli"
#include "crude/scene.glsli"
#include "crude/meshlet.glsli"
#include "crude/mesh.glsli"
#include "crude/culling.glsli"
#endif /* CRUDE_VALIDATOR_LINTING */

#extension GL_ARB_shader_draw_parameters : require
#extension GL_KHR_shader_subgroup_ballot: require

layout(local_size_x=32) in;

layout(set=CRUDE_MATERIAL_SET, binding=10) readonly buffer VisibleMeshCount
{
  uint                                                     opaque_mesh_visible_count;
  uint                                                     opaque_mesh_culled_count;
  uint                                                     transparent_mesh_visible_count;
  uint                                                     transparent_mesh_culled_count;

  uint                                                     total_count;
  uint                                                     depth_pyramid_texture_index;
  uint                                                     occlusion_culling_late_flag;
  uint                                                     meshlet_index_count;

  uint                                                     dispatch_task_x;
  uint                                                     dispatch_task_y;
  uint                                                     dispatch_task_z;
  uint                                                     meshlet_instances_count;
};

layout(set=CRUDE_MATERIAL_SET, binding=11, row_major, std430) readonly buffer MeshDrawCommands
{
  crude_mesh_draw_command                                  mesh_draw_commands[];
};

taskPayloadSharedEXT struct
{
  uint                                                     meshlet_indices[ 128 ];
  uint                                                     mesh_draw_indices[ 128 ];
} shared_data;

void main()
{
  uint thread_index = gl_LocalInvocationID.x;
  uint group_index = gl_WorkGroupID.x;
  uint darw_id = mesh_draw_commands[ gl_DrawIDARB ].draw_id;
  uint meshlet_index = mesh_draws[ darw_id ].meshletes_offset + group_index * gl_WorkGroupSize.x + thread_index;

  if ( meshlet_index >= mesh_draws[ darw_id ].meshletes_offset + mesh_draws[ darw_id ].meshletes_count )
  {
    return;
  }

  mat4 model_to_world = mesh_draws[ darw_id ].model_to_world;
  vec4 world_center = vec4( meshlets[ meshlet_index ].center, 1 ) * model_to_world;
  float scale = max( model_to_world[ 0 ][ 0 ], max( model_to_world[ 1 ][ 1 ], model_to_world[ 2 ][ 2 ] ) );
  float radius = meshlets[ meshlet_index ].radius * scale * 1.1;
  vec3 cone_axis = vec3(
    int( meshlets[ meshlet_index ].cone_axis[ 0 ] ) / 127.0,
    int( meshlets[ meshlet_index ].cone_axis[ 1 ]) / 127.0,
    int( meshlets[ meshlet_index ].cone_axis[ 2 ]) / 127.0 ) * mat3( model_to_world );
  float cone_cutoff = int( meshlets[ meshlet_index ].cone_cutoff ) / 127.0;
  
  bool accept = true;

  accept = !crude_clustered_backface_culling( world_center.xyz, radius, cone_axis, cone_cutoff, crude_camera_debug_culling() ? camera_debug.position : camera.position );
  
  vec4 view_center = world_center * ( crude_camera_debug_culling() ? camera_debug.world_to_view : camera.world_to_view );

  bool frustum_visible = true;
  for ( uint i = 0; i < 6; ++i )
  {
    frustum_visible = frustum_visible && ( dot( ( crude_camera_debug_culling() ? camera_debug.frustum_planes_culling[ i ] : camera.frustum_planes_culling[ i ] ), view_center ) > -radius );
  }
  accept = accept && frustum_visible;
  
  bool occlusion_visible = false;
  if ( frustum_visible )
  {
    occlusion_visible = crude_occlusion_culling( darw_id, view_center.xyz, radius, camera.znear,
      camera.view_to_clip[ 0 ][ 0 ], camera.view_to_clip[ 1 ][ 1 ],
      depth_pyramid_texture_index,
      world_center.xyz, camera.position, camera.world_to_clip
    );
  }
  accept = accept && occlusion_visible;

  uvec4 ballot = subgroupBallot( accept );
  
  uint previous_visible_meshlet_index = subgroupBallotExclusiveBitCount( ballot );
  if ( accept )
  {
    shared_data.meshlet_indices[ previous_visible_meshlet_index ] = meshlet_index;
    shared_data.mesh_draw_indices[ previous_visible_meshlet_index ] = darw_id;
  }
  
  uint visible_meslets_count = subgroupBallotBitCount( ballot );
  if ( thread_index == 0 )
  {
    EmitMeshTasksEXT( visible_meslets_count, 1, 1 );
  }
}