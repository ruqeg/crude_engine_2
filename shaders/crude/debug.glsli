
#ifndef CRUDE_DEBUG_GLSLI
#define CRUDE_DEBUG_GLSLI

CRUDE_RWBUFFER( CrudeDebugCount, 50 )
{
  uint                                                     debug_lines_3d_vertices_count;
  uint                                                     debug_lines_3d_instances_count;
  uint                                                     debug_lines_3d_first_vertex;
  uint                                                     debug_lines_3d_first_instance;
  uint                                                     debug_lines_2d_vertices_count;
  uint                                                     debug_lines_2d_instances_count;
  uint                                                     debug_lines_2d_first_vertex;
  uint                                                     debug_lines_2d_first_instance;
  uint                                                     debug_cubes_vertices_count;
  uint                                                     debug_cubes_instances_count;
  uint                                                     debug_cubes_first_vertex;
  uint                                                     debug_cubes_first_instance;
};

CRUDE_RWBUFFER( CrudeDebugLines, 51 )
{
  crude_debug_line_vertex                                  debug_line_vertices[];
};
CRUDE_RWBUFFER( CrudeDebugCubes, 52 )
{
  crude_debug_cube_instance                                debug_cube_instances[];
};

void crude_debug_draw_line_coloru( vec3 start, vec3 end, uint start_color, uint end_color )
{
  uint offset = atomicAdd( debug_lines_3d_vertices_count, 2 );

  debug_line_vertices[ offset ].position = start;
  debug_line_vertices[ offset ].color = start_color;

  debug_line_vertices[ offset + 1 ].position = end;
  debug_line_vertices[ offset + 1 ].color = end_color;
}

void crude_debug_draw_line( vec3 start, vec3 end, vec4 start_color, vec4 end_color )
{
  crude_debug_draw_line_coloru( start, end, crude_vec4_to_rgba( start_color ), crude_vec4_to_rgba( end_color ) );
}

void crude_debug_draw_box( vec3 mn, vec3 mx, vec4 color )
{
  const float x0 = mn.x;
  const float y0 = mn.y;
  const float z0 = mn.z;
  const float x1 = mx.x;
  const float y1 = mx.y;
  const float z1 = mx.z;

  uint color_uint = crude_vec4_to_rgba( color );

  crude_debug_draw_line_coloru( vec3( x0, y0, z0 ), vec3( x0, y1, z0 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x0, y1, z0 ), vec3( x1, y1, z0 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y1, z0 ), vec3( x1, y0, z0 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y0, z0 ), vec3( x0, y0, z0 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x0, y0, z0 ), vec3( x0, y0, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x0, y1, z0 ), vec3( x0, y1, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y1, z0 ), vec3( x1, y1, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y0, z0 ), vec3( x1, y0, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x0, y0, z1 ), vec3( x0, y1, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x0, y1, z1 ), vec3( x1, y1, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y1, z1 ), vec3( x1, y0, z1 ), color_uint, color_uint );
  crude_debug_draw_line_coloru( vec3( x1, y0, z1 ), vec3( x0, y0, z1 ), color_uint, color_uint );
}

void crude_debug_draw_line_2d_coloru( vec2 start, vec2 end, uint start_color, uint end_color )
{
  uint offset = CRUDE_DEBUG_2D_LINES_OFFSET + atomicAdd( debug_lines_2d_vertices_count, 2 );

  debug_line_vertices[ offset ].position = vec3( start.xy, 0 );
  debug_line_vertices[ offset ].color = start_color;

  debug_line_vertices[ offset + 1 ].position = vec3( end.xy, 0 );
  debug_line_vertices[ offset + 1 ].color = end_color;
}

void crude_debug_draw_cube_coloru( vec3 translation, vec3 scale, uint color )
{
  uint offset = atomicAdd( debug_cubes_instances_count, 1 );

  debug_cube_instances[ offset ].translation = translation;
  debug_cube_instances[ offset ].scale = scale;
  debug_cube_instances[ offset ].color = color;
}

void crude_debug_draw_2d_line( vec2 start, vec2 end, vec4 start_color, vec4 end_color )
{
  crude_debug_draw_line_2d_coloru( start, end, crude_vec4_to_rgba( start_color ), crude_vec4_to_rgba( end_color ) );
}

void crude_debug_draw_2d_box( vec2 min, vec2 max, vec4 color )
{
  uint color_uint = crude_vec4_to_rgba(color);

  crude_debug_draw_line_2d_coloru( vec2(min.x, min.y), vec2(max.x, min.y), color_uint, color_uint );
  crude_debug_draw_line_2d_coloru( vec2(max.x, min.y), vec2(max.x, max.y), color_uint, color_uint );
  crude_debug_draw_line_2d_coloru( vec2(max.x, max.y), vec2(min.x, max.y), color_uint, color_uint );
  crude_debug_draw_line_2d_coloru( vec2(min.x, max.y), vec2(min.x, min.y), color_uint, color_uint );
}

void crude_debug_draw_cube( vec3 translation, vec3 scale, vec4 color )
{
  uint color_uint = crude_vec4_to_rgba( color );
  crude_debug_draw_cube_coloru( translation, scale, color_uint );
}

#endif /* CRUDE_DEBUG_GLSLI */