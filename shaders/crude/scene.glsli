
#ifndef CRUDE_SCENE_GLSL
#define CRUDE_SCENE_GLSL

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require

#ifdef CRUDE_GRAPHICS_RAY_TRACING_ENABLED

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require

layout(buffer_reference, buffer_reference_align=4, std430) buffer vec2_array_type
{
  vec2                                                     v;
};

layout(buffer_reference, buffer_reference_align=2, std430) buffer int_array_type
{
  uint16_t                                                 v;
};

layout(buffer_reference, buffer_reference_align=4, std430) buffer float_array_type
{
  float                                                    v;
};
#endif /* CRUDE_GRAPHICS_RAY_TRACING_ENABLED */

struct crude_mesh_draw_command
{
  uint                                                     draw_id;
  uint                                                     indirect_meshlet_group_count_x;
  uint                                                     indirect_meshlet_group_count_y;
  uint                                                     indirect_meshlet_group_count_z;
};

struct crude_mesh_draw
{
  uvec4                                                    textures;
  vec4                                                     emissive;
  vec4                                                     albedo_color_factor;
  vec4                                                     metallic_roughness_occlusion_factor;

  uint                                                     flags;
  float                                                    alpha_cutoff;
  uint                                                     vertices_offset;
  uint                                                     mesh_index;

  uint                                                     meshletes_offset;
  uint                                                     meshletes_count;
  uint                                                     meshletes_index_count;
  uint                                                     padding1;

  uint64_t                                                 position_buffer;
  uint64_t                                                 texcoord_buffer;
  uint64_t                                                 index_buffer;
  uint64_t                                                 normal_buffer;
};

struct crude_mesh_instance_draw
{
  mat4                                                     model_to_world;
  mat4                                                     world_to_model;
  uint                                                     mesh_draw_index;
  vec3                                                     padding1;
};

struct crude_meshlet
{
  vec3                                                     center;
  float                                                    radius;
  int8_t                                                   cone_axis[ 3 ];
  int8_t                                                   cone_cutoff;
  uint                                                     vertices_offset;
  uint                                                     triangles_offset;
  uint8_t                                                  vertices_count;
  uint8_t                                                  triangles_count;
  uint                                                     mesh_index;
};

struct crude_vertex
{
  vec3                                                     position;
  float                                                    padding1;
  uint8_t                                                  nx, ny, nz, nw;
  uint8_t                                                  tx, ty, tz, tw;
  float16_t                                                tu, tv;
  float                                                    padding2;
};

struct crude_camera
{
  mat4                                                     world_to_clip;
  mat4                                                     world_to_view;
  mat4                                                     view_to_clip;
  mat4                                                     clip_to_view;
  mat4                                                     view_to_world;
  mat4                                                     clip_to_world;
  vec4                                                     frustum_planes_culling[ 6 ];
  vec3                                                     position;
  float                                                    padding1;
  float                                                    znear;
  float                                                    zfar;
  vec2                                                     padding2;
};

struct crude_scene
{
  crude_camera                                             camera;
  crude_camera                                             camera_previous;
  vec2                                                     resolution;
  uint                                                     flags;
  uint                                                     mesh_instances_count;

  uint                                                     active_lights_count;
  uint                                                     tiled_shadowmap_texture_index;
  vec2                                                     inv_shadow_map_size;

  vec3                                                     background_color;
  float                                                    background_intensity;
  vec3                                                     ambient_color;
  float                                                    ambient_intensity;
  uint                                                     indirect_light_texture_index;
};

#endif /* CRUDE_SCENE_GLSL */