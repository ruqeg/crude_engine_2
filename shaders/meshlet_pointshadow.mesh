
#extension GL_EXT_mesh_shader : require

#ifdef CRUDE_VALIDATOR_LINTING
#include "crude/platform.glsli"
#include "crude/debug.glsli"
#include "crude/scene.glsli"
#include "crude/meshlet.glsli"
#include "crude/mesh.glsli"
#include "crude/culling.glsli"
#include "crude/light.glsli"
#endif /* CRUDE_VALIDATOR_LINTING */

layout(local_size_x=128, local_size_y=1, local_size_z=1) in;
layout(triangles) out;
layout(max_vertices=128, max_primitives=124) out;

layout(location=0) out vec2 out_texcoord[];
layout(location=1) out flat uint out_mesh_draw_index[];
layout(location=2) out vec3 out_normals[];

layout(set=CRUDE_MATERIAL_SET, binding=10) readonly buffer VisibleMeshCount
{
  uint                                                     opaque_mesh_visible_count;
  uint                                                     opaque_mesh_culled_count;
  uint                                                     transparent_mesh_visible_count;
  uint                                                     transparent_mesh_culled_count;

  uint                                                     total_count;
  uint                                                     depth_pyramid_texture_index;
  uint                                                     occlusion_culling_late_flag;
  uint                                                     meshlet_index_count;

  uint                                                     dispatch_task_x;
  uint                                                     dispatch_task_y;
  uint                                                     dispatch_task_z;
  uint                                                     meshlet_instances_count;
};

layout(set=CRUDE_MATERIAL_SET, binding=11, row_major, std430) readonly buffer MeshDrawCommands
{
  crude_mesh_draw_command                                  mesh_draw_commands[];
};

layout(set=CRUDE_MATERIAL_SET, binding=12) readonly buffer ShadowCameraSpheres
{
  vec4                                                     shadow_camera_spheres[];
};

layout(set=CRUDE_MATERIAL_SET, binding=13) readonly buffer ShadowViews
{
  mat4                                                      shadow_world_to_view[];
};
layout(push_constant) uniform PushConstants
{
  uint                                                     command_read_offset;
};

taskPayloadSharedEXT struct
{
  uint                                                     meshlet_indices[ 128 ];
  uint                                                     mesh_instance_draw_indices[ 128 ];
  uint                                                     light_index_face_index;
} shared_data;

void main()
{
  uint task_index = gl_LocalInvocationID.x;
  uint local_meshlet_index = gl_WorkGroupID.x;
  uint global_meshlet_index = shared_data.meshlet_indices[ local_meshlet_index ];
  uint mesh_instance_draw_index = shared_data.mesh_instance_draw_indices[ local_meshlet_index ];
  uint mesh_draw_index = mesh_instance_draws[ mesh_instance_draw_index ].mesh_draw_index;
  
  uint mesh_index = meshlets[ global_meshlet_index ].mesh_index;
  uint vertices_count = uint( meshlets[ global_meshlet_index ].vertices_count );
  uint triangles_count = uint( meshlets[ global_meshlet_index ].triangles_count );
  
  uint vertices_offset = meshlets[ global_meshlet_index ].vertices_offset;
  uint triangles_offset = meshlets[ global_meshlet_index ].triangles_offset;

  uint light_index = shared_data.light_index_face_index >> 16;
  uint face_index = ( shared_data.light_index_face_index & 0xf );
  int layer_index = int( CRUDE_CUBEMAP_COUNT * light_index + face_index );

  mat4 model_to_world = mesh_instance_draws[ mesh_instance_draw_index ].model_to_world;

  SetMeshOutputsEXT( vertices_count, triangles_count );
  
  for ( uint i = task_index; i < vertices_count; i += gl_WorkGroupSize.x )
  {
    uint vertex_index = vertices_indices[ i + vertices_offset ];
    vec4 model_position = vec4( vertices[ vertex_index ].position, 1.0 );
    
    gl_MeshVerticesEXT[ i ].gl_Position = model_position * model_to_world * shadow_world_to_view[ layer_index ];
  }

  for ( uint i = task_index; i < triangles_count; i += gl_WorkGroupSize.x )
  {
    uint triangle_index = uint( 3 * i + triangles_offset );
    gl_PrimitiveTriangleIndicesEXT[ i ] = uvec3( triangles_indices[ triangle_index ], triangles_indices[ triangle_index + 1 ], triangles_indices[ triangle_index + 2 ] );
  }

  gl_MeshPrimitivesEXT[ task_index ].gl_Layer = layer_index;
  gl_MeshPrimitivesEXT[ task_index + gl_WorkGroupSize.x ].gl_Layer = layer_index;
  gl_MeshPrimitivesEXT[ task_index + 2 * gl_WorkGroupSize.x ].gl_Layer = layer_index;
  gl_MeshPrimitivesEXT[ task_index + 3 * gl_WorkGroupSize.x ].gl_Layer = layer_index;
}